daemon off;
error_log /Users/snw/www/buyma_insider/log/nginx-error.log debug;
# set the max limit to 128, ulimit -a macosx returns 256
# worker_rlimit_nofile 128;

events {
  # ulimit on macosx is 256
  worker_connections 128;
}

http {
  include             mime.types;
  etag                off;

  upstream buyma_insider {
    server unix:/Users/snw/www/buyma_insider/tmp/sockets/unicorn.sock fail_timeout=0;
  }

  server {
    listen              8080;
    server_name         localhost;

    keepalive_timeout   30s;
    sendfile            on;
    tcp_nopush          on;
    # tcp_nodelay        on;

    access_log          /Users/snw/www/buyma_insider/log/nginx-access.log;

    location / {
      root              /Users/snw/www/buyma_insider;
      try_files         $uri/index.html $uri @buyma_insider;
    }

    location ~ \.(jpe?g|gif|png|css|js|ico|xml|rss|txt)$ {
      root              /Users/snw/www/buyma_insider/public;
      # Requires the gzip static modules
      # Will look for gz version by default unless changed
      gzip_static       on;
    }

    location @buyma_insider {
      proxy_pass        http://buyma_insider;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect    off;
    }

    # error_page          500 502 503 504 /500.html;
    # Compression
    # Enable Gzip compressed.
    gzip                on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1.
    gzip_http_version   1.1;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level     5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length     256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied        any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary           on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/rss+xml
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/svg+xml
    # image/x-icon
    # text/css
    # text/plain
      text/x-component;
    # text/html is always compressed by HttpGzipModule
  }
}
